// Code generated by MockGen. DO NOT EDIT.
// Source: hw4.go

// Package hw4 is a generated GoMock package.
package hw4

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICommand is a mock of ICommand interface.
type MockICommand struct {
	ctrl     *gomock.Controller
	recorder *MockICommandMockRecorder
}

// MockICommandMockRecorder is the mock recorder for MockICommand.
type MockICommandMockRecorder struct {
	mock *MockICommand
}

// NewMockICommand creates a new mock instance.
func NewMockICommand(ctrl *gomock.Controller) *MockICommand {
	mock := &MockICommand{ctrl: ctrl}
	mock.recorder = &MockICommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommand) EXPECT() *MockICommandMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockICommand) Execute() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockICommandMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockICommand)(nil).Execute))
}

// MockFuelable is a mock of Fuelable interface.
type MockFuelable struct {
	ctrl     *gomock.Controller
	recorder *MockFuelableMockRecorder
}

// MockFuelableMockRecorder is the mock recorder for MockFuelable.
type MockFuelableMockRecorder struct {
	mock *MockFuelable
}

// NewMockFuelable creates a new mock instance.
func NewMockFuelable(ctrl *gomock.Controller) *MockFuelable {
	mock := &MockFuelable{ctrl: ctrl}
	mock.recorder = &MockFuelableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFuelable) EXPECT() *MockFuelableMockRecorder {
	return m.recorder
}

// Burn mocks base method.
func (m *MockFuelable) Burn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Burn")
	ret0, _ := ret[0].(error)
	return ret0
}

// Burn indicates an expected call of Burn.
func (mr *MockFuelableMockRecorder) Burn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Burn", reflect.TypeOf((*MockFuelable)(nil).Burn))
}

// Current mocks base method.
func (m *MockFuelable) Current() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Current")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Current indicates an expected call of Current.
func (mr *MockFuelableMockRecorder) Current() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Current", reflect.TypeOf((*MockFuelable)(nil).Current))
}

// Refuel mocks base method.
func (m *MockFuelable) Refuel(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refuel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refuel indicates an expected call of Refuel.
func (mr *MockFuelableMockRecorder) Refuel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refuel", reflect.TypeOf((*MockFuelable)(nil).Refuel), arg0)
}

// MockMovable is a mock of Movable interface.
type MockMovable struct {
	ctrl     *gomock.Controller
	recorder *MockMovableMockRecorder
}

// MockMovableMockRecorder is the mock recorder for MockMovable.
type MockMovableMockRecorder struct {
	mock *MockMovable
}

// NewMockMovable creates a new mock instance.
func NewMockMovable(ctrl *gomock.Controller) *MockMovable {
	mock := &MockMovable{ctrl: ctrl}
	mock.recorder = &MockMovableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovable) EXPECT() *MockMovableMockRecorder {
	return m.recorder
}

// Position mocks base method.
func (m *MockMovable) Position() (float64, float64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Position")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	return ret0, ret1
}

// Position indicates an expected call of Position.
func (mr *MockMovableMockRecorder) Position() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Position", reflect.TypeOf((*MockMovable)(nil).Position))
}

// SetPosition mocks base method.
func (m *MockMovable) SetPosition(x, y float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPosition", x, y)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPosition indicates an expected call of SetPosition.
func (mr *MockMovableMockRecorder) SetPosition(x, y interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPosition", reflect.TypeOf((*MockMovable)(nil).SetPosition), x, y)
}

// SetVelocity mocks base method.
func (m *MockMovable) SetVelocity(x, y float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVelocity", x, y)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVelocity indicates an expected call of SetVelocity.
func (mr *MockMovableMockRecorder) SetVelocity(x, y interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVelocity", reflect.TypeOf((*MockMovable)(nil).SetVelocity), x, y)
}

// Velocity mocks base method.
func (m *MockMovable) Velocity() (float64, float64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Velocity")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	return ret0, ret1
}

// Velocity indicates an expected call of Velocity.
func (mr *MockMovableMockRecorder) Velocity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Velocity", reflect.TypeOf((*MockMovable)(nil).Velocity))
}

// MockRotable is a mock of Rotable interface.
type MockRotable struct {
	ctrl     *gomock.Controller
	recorder *MockRotableMockRecorder
}

// MockRotableMockRecorder is the mock recorder for MockRotable.
type MockRotableMockRecorder struct {
	mock *MockRotable
}

// NewMockRotable creates a new mock instance.
func NewMockRotable(ctrl *gomock.Controller) *MockRotable {
	mock := &MockRotable{ctrl: ctrl}
	mock.recorder = &MockRotableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRotable) EXPECT() *MockRotableMockRecorder {
	return m.recorder
}

// AngurlarVelocity mocks base method.
func (m *MockRotable) AngurlarVelocity() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AngurlarVelocity")
	ret0, _ := ret[0].(int64)
	return ret0
}

// AngurlarVelocity indicates an expected call of AngurlarVelocity.
func (mr *MockRotableMockRecorder) AngurlarVelocity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AngurlarVelocity", reflect.TypeOf((*MockRotable)(nil).AngurlarVelocity))
}

// Direction mocks base method.
func (m *MockRotable) Direction() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Direction")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Direction indicates an expected call of Direction.
func (mr *MockRotableMockRecorder) Direction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Direction", reflect.TypeOf((*MockRotable)(nil).Direction))
}

// DirectionNumber mocks base method.
func (m *MockRotable) DirectionNumber() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirectionNumber")
	ret0, _ := ret[0].(int64)
	return ret0
}

// DirectionNumber indicates an expected call of DirectionNumber.
func (mr *MockRotableMockRecorder) DirectionNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirectionNumber", reflect.TypeOf((*MockRotable)(nil).DirectionNumber))
}

// SetDirection mocks base method.
func (m *MockRotable) SetDirection(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDirection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDirection indicates an expected call of SetDirection.
func (mr *MockRotableMockRecorder) SetDirection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDirection", reflect.TypeOf((*MockRotable)(nil).SetDirection), arg0)
}

// MockVelocityChangable is a mock of VelocityChangable interface.
type MockVelocityChangable struct {
	ctrl     *gomock.Controller
	recorder *MockVelocityChangableMockRecorder
}

// MockVelocityChangableMockRecorder is the mock recorder for MockVelocityChangable.
type MockVelocityChangableMockRecorder struct {
	mock *MockVelocityChangable
}

// NewMockVelocityChangable creates a new mock instance.
func NewMockVelocityChangable(ctrl *gomock.Controller) *MockVelocityChangable {
	mock := &MockVelocityChangable{ctrl: ctrl}
	mock.recorder = &MockVelocityChangableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVelocityChangable) EXPECT() *MockVelocityChangableMockRecorder {
	return m.recorder
}

// Direction mocks base method.
func (m *MockVelocityChangable) Direction() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Direction")
	ret0, _ := ret[0].(int64)
	return ret0
}

// Direction indicates an expected call of Direction.
func (mr *MockVelocityChangableMockRecorder) Direction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Direction", reflect.TypeOf((*MockVelocityChangable)(nil).Direction))
}

// SetVelocity mocks base method.
func (m *MockVelocityChangable) SetVelocity(x, y float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetVelocity", x, y)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetVelocity indicates an expected call of SetVelocity.
func (mr *MockVelocityChangableMockRecorder) SetVelocity(x, y interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVelocity", reflect.TypeOf((*MockVelocityChangable)(nil).SetVelocity), x, y)
}

// Velocity mocks base method.
func (m *MockVelocityChangable) Velocity() (float64, float64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Velocity")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(float64)
	return ret0, ret1
}

// Velocity indicates an expected call of Velocity.
func (mr *MockVelocityChangableMockRecorder) Velocity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Velocity", reflect.TypeOf((*MockVelocityChangable)(nil).Velocity))
}
